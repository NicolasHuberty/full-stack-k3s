name: Build and Deploy

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'apps/**'
      - 'infra/**'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and validate YAML files
  lint:
    name: Lint YAML Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install yamllint
        run: pip install yamllint

      - name: Lint YAML files
        run: yamllint -c .yamllint.yaml infra/

      - name: Install kubeconform
        run: |
          wget https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform-linux-amd64.tar.gz
          sudo mv kubeconform /usr/local/bin/

      - name: Validate Kubernetes manifests
        run: |
          find infra/ -name '*.yaml' -type f | xargs kubeconform -strict -ignore-missing-schemas

  # Validate Helm charts
  helm-lint:
    name: Lint Helm Charts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'

      - name: Lint Helm charts
        run: |
          for chart in infra/charts/*/; do
            if [ -f "$chart/Chart.yaml" ]; then
              echo "Linting $chart"
              helm lint "$chart"
            fi
          done

  # Build and push Docker image
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: [lint, helm-lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/demo-app
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Update Kubernetes manifests with new image tag
  update-manifests:
    name: Update Manifests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update image tag
        run: |
          # Update the image tag in the deployment manifest
          IMAGE_TAG="${GITHUB_SHA::7}"
          sed -i "s|image:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${IMAGE_TAG}|g" \
            infra/apps/demo-app/deployment.yaml

      - name: Commit changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add infra/apps/demo-app/deployment.yaml
          git diff --quiet && git diff --staged --quiet || \
            git commit -m "chore: update demo-app image to ${GITHUB_SHA::7}"
          git push

  # Notify on deployment
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: update-manifests
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.update-manifests.result }}" == "success" ]; then
            echo "✅ Deployment successful! Argo CD will sync the changes."
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
