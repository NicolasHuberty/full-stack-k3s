'use client'

import { useSession, signOut } from 'next-auth/react'
import { redirect } from 'next/navigation'
import Image from 'next/image'
import Link from 'next/link'
import { useState, useRef, useEffect } from 'react'
import {
  MessageSquare,
  Upload,
  LogOut,
  Database,
  Users,
  Settings,
  Home,
  User,
  ChevronDown,
  Plus,
  Mail,
  Shield,
  X,
  Clock
} from 'lucide-react'

export default function DashboardPage() {
  const { data: session, status } = useSession()
  const [activeTab, setActiveTab] = useState('home')
  const [dropdownOpen, setDropdownOpen] = useState(false)
  const dropdownRef = useRef<HTMLDivElement>(null)

  // Organization & Teams state
  const [organizations, setOrganizations] = useState<any[]>([])
  const [selectedOrg, setSelectedOrg] = useState<any>(null)
  const [showInviteModal, setShowInviteModal] = useState(false)
  const [showCreateOrgModal, setShowCreateOrgModal] = useState(false)
  const [inviteEmail, setInviteEmail] = useState('')
  const [inviteRole, setInviteRole] = useState<'ADMIN' | 'MEMBER' | 'VIEWER'>('MEMBER')
  const [loading, setLoading] = useState(false)
  const [message, setMessage] = useState<{ type: 'success' | 'error', text: string } | null>(null)

  // New organization form
  const [orgName, setOrgName] = useState('')
  const [orgSlug, setOrgSlug] = useState('')
  const [orgDomain, setOrgDomain] = useState('')

  // Collections state
  const [collections, setCollections] = useState<any[]>([])
  const [showCreateCollectionModal, setShowCreateCollectionModal] = useState(false)
  const [collectionName, setCollectionName] = useState('')
  const [collectionDescription, setCollectionDescription] = useState('')
  const [collectionVisibility, setCollectionVisibility] = useState<'PRIVATE' | 'ORGANIZATION' | 'PUBLIC'>('PRIVATE')

  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setDropdownOpen(false)
      }
    }
    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  // Fetch organizations when Teams tab is active
  useEffect(() => {
    if (activeTab === 'teams' && session) {
      fetchOrganizations()
    }
  }, [activeTab, session])

  // Fetch collections when Collections tab is active
  useEffect(() => {
    if (activeTab === 'databases' && session) {
      fetchCollections()
    }
  }, [activeTab, session])

  const fetchOrganizations = async () => {
    try {
      const res = await fetch('/api/organizations')
      if (res.ok) {
        const data = await res.json()
        setOrganizations(data.organizations)
        if (data.organizations.length > 0 && !selectedOrg) {
          const org = data.organizations[0]
          setSelectedOrg(org)
          // Fetch full org details
          fetchOrganizationDetails(org.organization?.id || org.id)
        }
      }
    } catch (error) {
      console.error('Failed to fetch organizations:', error)
    }
  }

  const fetchOrganizationDetails = async (orgId: string) => {
    try {
      const res = await fetch(`/api/organizations/${orgId}`)
      if (res.ok) {
        const data = await res.json()
        setSelectedOrg(data.organization)
      }
    } catch (error) {
      console.error('Failed to fetch organization details:', error)
    }
  }

  const handleCreateOrganization = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setMessage(null)

    try {
      const res = await fetch('/api/organizations', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: orgName,
          slug: orgSlug,
          domain: orgDomain || undefined,
        }),
      })

      if (res.ok) {
        const data = await res.json()
        setMessage({ type: 'success', text: 'Organization created successfully!' })
        setShowCreateOrgModal(false)
        setOrgName('')
        setOrgSlug('')
        setOrgDomain('')
        await fetchOrganizations()
      } else {
        const error = await res.json()
        setMessage({ type: 'error', text: error.error || 'Failed to create organization' })
      }
    } catch (error) {
      setMessage({ type: 'error', text: 'An error occurred' })
    } finally {
      setLoading(false)
    }
  }

  const handleInviteMember = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!selectedOrg) return

    setLoading(true)
    setMessage(null)

    try {
      const res = await fetch(`/api/organizations/${selectedOrg.id}/invite`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: inviteEmail,
          role: inviteRole,
        }),
      })

      if (res.ok) {
        setMessage({ type: 'success', text: 'Invitation sent successfully!' })
        setShowInviteModal(false)
        setInviteEmail('')
        setInviteRole('MEMBER')
        await fetchOrganizationDetails(selectedOrg.id)
      } else {
        const error = await res.json()
        setMessage({ type: 'error', text: error.error || 'Failed to send invitation' })
      }
    } catch (error) {
      setMessage({ type: 'error', text: 'An error occurred' })
    } finally {
      setLoading(false)
    }
  }

  const fetchCollections = async () => {
    try {
      const res = await fetch('/api/collections')
      if (res.ok) {
        const data = await res.json()
        setCollections(data.collections)
      }
    } catch (error) {
      console.error('Failed to fetch collections:', error)
    }
  }

  const handleCreateCollection = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setMessage(null)

    try {
      const res = await fetch('/api/collections', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: collectionName,
          description: collectionDescription,
          visibility: collectionVisibility,
        }),
      })

      if (res.ok) {
        setMessage({ type: 'success', text: 'Collection created successfully!' })
        setShowCreateCollectionModal(false)
        setCollectionName('')
        setCollectionDescription('')
        setCollectionVisibility('PRIVATE')
        await fetchCollections()
      } else {
        const error = await res.json()
        setMessage({ type: 'error', text: error.error || 'Failed to create collection' })
      }
    } catch (error) {
      setMessage({ type: 'error', text: 'An error occurred' })
    } finally {
      setLoading(false)
    }
  }

  if (status === 'loading') {
    return (
      <div className="flex min-h-screen items-center justify-center bg-background">
        <div className="text-center">
          <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading...</p>
        </div>
      </div>
    )
  }

  if (!session) {
    redirect('/login')
  }

  const navItems = [
    { id: 'home', label: 'Home', icon: Home, href: '/dashboard' },
    { id: 'chat', label: 'Chat', icon: MessageSquare, href: '/dashboard/chat' },
    { id: 'databases', label: 'Collections', icon: Database },
    { id: 'teams', label: 'Teams', icon: Users },
    { id: 'settings', label: 'Settings', icon: Settings, href: '/dashboard/settings' },
  ]

  return (
    <div className="flex h-screen bg-background">
      {/* Sidebar */}
      <aside className="w-64 border-r border-border bg-card/50 backdrop-blur flex flex-col">
        {/* Logo */}
        <div className="p-6 border-b border-border">
          <Link href="/" className="flex items-center gap-3">
            <Image src="/docuralis.png" alt="Docuralis" width={50} height={50} className="h-16 w-auto" />
          </Link>
        </div>

        {/* Navigation */}
        <nav className="flex-1 p-4 space-y-1">
          {navItems.map((item) => {
            const Icon = item.icon
            const isActive = activeTab === item.id

            if (item.href) {
              return (
                <Link
                  key={item.id}
                  href={item.href}
                  className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg transition ${
                    isActive
                      ? 'bg-primary/10 text-primary font-medium'
                      : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'
                  }`}
                >
                  <Icon className="h-5 w-5" />
                  <span>{item.label}</span>
                </Link>
              )
            }

            return (
              <button
                key={item.id}
                onClick={() => setActiveTab(item.id)}
                className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg transition ${
                  isActive
                    ? 'bg-primary/10 text-primary font-medium'
                    : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'
                }`}
              >
                <Icon className="h-5 w-5" />
                <span>{item.label}</span>
              </button>
            )
          })}
        </nav>

        {/* User Profile */}
        <div className="p-4 border-t border-border relative" ref={dropdownRef}>
          <button
            onClick={() => setDropdownOpen(!dropdownOpen)}
            className="flex items-center gap-3 w-full px-2 py-2 rounded-lg hover:bg-muted/50 transition"
          >
            {session.user.image ? (
              <Image
                src={session.user.image}
                alt={session.user.name || 'User'}
                width={40}
                height={40}
                className="h-10 w-10 rounded-full object-cover"
              />
            ) : (
              <div className="h-10 w-10 rounded-full bg-primary/20 flex items-center justify-center text-primary text-sm font-semibold">
                {session.user.name?.[0]?.toUpperCase() || session.user.email?.[0]?.toUpperCase()}
              </div>
            )}
            <div className="flex-1 min-w-0 text-left">
              <p className="text-sm font-medium text-foreground truncate">{session.user.name || 'User'}</p>
              <p className="text-xs text-muted-foreground truncate">{session.user.email}</p>
            </div>
            <ChevronDown className={`h-4 w-4 text-muted-foreground transition-transform ${dropdownOpen ? 'rotate-180' : ''}`} />
          </button>

          {/* Dropdown Menu */}
          {dropdownOpen && (
            <div className="absolute bottom-full left-4 right-4 mb-2 bg-card border border-border rounded-lg shadow-lg overflow-hidden">
              <button
                onClick={() => {
                  setActiveTab('settings')
                  setDropdownOpen(false)
                }}
                className="flex items-center gap-3 w-full px-4 py-3 text-sm text-foreground hover:bg-muted/50 transition"
              >
                <User className="h-4 w-4" />
                <span>Profile</span>
              </button>
              <button
                onClick={() => signOut()}
                className="flex items-center gap-3 w-full px-4 py-3 text-sm text-foreground hover:bg-muted/50 transition border-t border-border"
              >
                <LogOut className="h-4 w-4" />
                <span>Sign Out</span>
              </button>
            </div>
          )}
        </div>
      </aside>

      {/* Main Content */}
      <main className="flex-1 overflow-auto">
        <div className="max-w-6xl mx-auto p-8">
          {activeTab === 'home' && (
            <>
              <div className="mb-8">
                <h1 className="text-3xl font-bold mb-2">
                  Welcome back, {session.user.name?.split(' ')[0] || 'there'}
                </h1>
                <p className="text-muted-foreground">Get started with your AI-powered document assistant</p>
              </div>

              {/* Quick Actions */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
                <button
                  onClick={() => setActiveTab('chat')}
                  className="flex items-center gap-4 p-6 rounded-xl border border-border bg-card hover:shadow-md hover:border-primary/50 transition text-left"
                >
                  <div className="h-12 w-12 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0">
                    <MessageSquare className="h-6 w-6 text-primary" />
                  </div>
                  <div>
                    <h3 className="font-semibold mb-1">New Chat</h3>
                    <p className="text-xs text-muted-foreground">Start conversation</p>
                  </div>
                </button>

                <button
                  onClick={() => setActiveTab('databases')}
                  className="flex items-center gap-4 p-6 rounded-xl border border-border bg-card hover:shadow-md hover:border-primary/50 transition text-left"
                >
                  <div className="h-12 w-12 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0">
                    <Upload className="h-6 w-6 text-primary" />
                  </div>
                  <div>
                    <h3 className="font-semibold mb-1">Upload Files</h3>
                    <p className="text-xs text-muted-foreground">Add documents</p>
                  </div>
                </button>

                <button
                  onClick={() => setActiveTab('teams')}
                  className="flex items-center gap-4 p-6 rounded-xl border border-border bg-card hover:shadow-md hover:border-primary/50 transition text-left"
                >
                  <div className="h-12 w-12 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0">
                    <Users className="h-6 w-6 text-primary" />
                  </div>
                  <div>
                    <h3 className="font-semibold mb-1">Invite Team</h3>
                    <p className="text-xs text-muted-foreground">Collaborate</p>
                  </div>
                </button>
              </div>

              {/* Stats */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="p-6 rounded-xl border border-border bg-card">
                  <div className="flex items-center justify-between mb-2">
                    <p className="text-sm text-muted-foreground">Conversations</p>
                    <MessageSquare className="h-5 w-5 text-muted-foreground" />
                  </div>
                  <p className="text-3xl font-bold">0</p>
                </div>

                <div className="p-6 rounded-xl border border-border bg-card">
                  <div className="flex items-center justify-between mb-2">
                    <p className="text-sm text-muted-foreground">Collections</p>
                    <Database className="h-5 w-5 text-muted-foreground" />
                  </div>
                  <p className="text-3xl font-bold">0</p>
                </div>

                <div className="p-6 rounded-xl border border-border bg-card">
                  <div className="flex items-center justify-between mb-2">
                    <p className="text-sm text-muted-foreground">Documents</p>
                    <Upload className="h-5 w-5 text-muted-foreground" />
                  </div>
                  <p className="text-3xl font-bold">0</p>
                </div>
              </div>
            </>
          )}

          {activeTab === 'chat' && (
            <div className="max-w-4xl mx-auto">
              <div className="flex items-center justify-between mb-8">
                <div>
                  <h1 className="text-3xl font-bold mb-2">Chat</h1>
                  <p className="text-muted-foreground">Ask questions and get AI-powered answers</p>
                </div>
                <button className="flex items-center gap-2 px-4 py-2 rounded-lg bg-primary text-primary-foreground hover:opacity-90 transition">
                  <Plus className="h-4 w-4" />
                  New Chat
                </button>
              </div>

              <div className="rounded-xl border border-border bg-card p-12 text-center">
                <div className="h-16 w-16 rounded-full bg-muted/50 flex items-center justify-center mx-auto mb-4">
                  <MessageSquare className="h-8 w-8 text-muted-foreground" />
                </div>
                <h2 className="text-xl font-semibold mb-2">No conversations yet</h2>
                <p className="text-muted-foreground">
                  Start your first conversation with an AI agent
                </p>
              </div>
            </div>
          )}

          {activeTab === 'databases' && (
            <div>
              <div className="flex items-center justify-between mb-8">
                <div>
                  <h1 className="text-3xl font-bold mb-2">Collections</h1>
                  <p className="text-muted-foreground">Organize your documents into knowledge bases</p>
                </div>
                <button
                  onClick={() => setShowCreateCollectionModal(true)}
                  className="flex items-center gap-2 px-4 py-2 rounded-lg bg-primary text-primary-foreground hover:opacity-90 transition"
                >
                  <Plus className="h-4 w-4" />
                  New Collection
                </button>
              </div>

              {collections.length === 0 ? (
                <div className="rounded-xl border border-border bg-card p-12 text-center">
                  <div className="h-16 w-16 rounded-full bg-muted/50 flex items-center justify-center mx-auto mb-4">
                    <Database className="h-8 w-8 text-muted-foreground" />
                  </div>
                  <h2 className="text-xl font-semibold mb-2">No collections yet</h2>
                  <p className="text-muted-foreground">
                    Create your first collection to start organizing documents
                  </p>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {collections.map((collection) => (
                    <div
                      key={collection.id}
                      className="rounded-xl border border-border bg-card p-6 hover:shadow-md transition cursor-pointer"
                    >
                      <div className="flex items-start justify-between mb-4">
                        <div className="h-12 w-12 rounded-lg bg-primary/10 flex items-center justify-center">
                          <Database className="h-6 w-6 text-primary" />
                        </div>
                        <span className="px-2 py-1 rounded text-xs bg-muted text-muted-foreground">
                          {collection.visibility}
                        </span>
                      </div>
                      <h3 className="font-semibold text-lg mb-2">{collection.name}</h3>
                      {collection.description && (
                        <p className="text-sm text-muted-foreground mb-4 line-clamp-2">
                          {collection.description}
                        </p>
                      )}
                      <div className="flex items-center justify-between text-sm text-muted-foreground">
                        <span>{collection.documentCount || 0} documents</span>
                        <span>{(parseInt(collection.storageUsed) / 1024 / 1024).toFixed(1)} MB</span>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'teams' && (
            <div>
              {/* Header with actions */}
              <div className="flex items-center justify-between mb-8">
                <div>
                  <h1 className="text-3xl font-bold mb-2">Teams</h1>
                  <p className="text-muted-foreground">Manage your organization and team members</p>
                </div>
                <div className="flex gap-3">
                  {organizations.length === 0 && (
                    <button
                      onClick={() => setShowCreateOrgModal(true)}
                      className="flex items-center gap-2 px-4 py-2 rounded-lg border border-border bg-card hover:bg-muted/50 transition"
                    >
                      <Plus className="h-4 w-4" />
                      Create Organization
                    </button>
                  )}
                  {selectedOrg && (
                    <button
                      onClick={() => setShowInviteModal(true)}
                      className="flex items-center gap-2 px-4 py-2 rounded-lg bg-primary text-primary-foreground hover:opacity-90 transition"
                    >
                      <Mail className="h-4 w-4" />
                      Invite Members
                    </button>
                  )}
                </div>
              </div>

              {/* Success/Error Messages */}
              {message && (
                <div className={`mb-6 p-4 rounded-lg ${message.type === 'success' ? 'bg-green-500/10 text-green-600' : 'bg-red-500/10 text-red-600'}`}>
                  {message.text}
                </div>
              )}

              {/* No organization state */}
              {organizations.length === 0 && (
                <div className="rounded-xl border border-border bg-card p-12 text-center">
                  <div className="h-16 w-16 rounded-full bg-muted/50 flex items-center justify-center mx-auto mb-4">
                    <Users className="h-8 w-8 text-muted-foreground" />
                  </div>
                  <h2 className="text-xl font-semibold mb-2">No organization yet</h2>
                  <p className="text-muted-foreground mb-6">
                    Create an organization to invite team members and collaborate
                  </p>
                  <button
                    onClick={() => setShowCreateOrgModal(true)}
                    className="px-4 py-2 rounded-lg bg-primary text-primary-foreground hover:opacity-90 transition"
                  >
                    Create Your First Organization
                  </button>
                </div>
              )}

              {/* Organization content */}
              {selectedOrg && (
                <div className="space-y-6">
                  {/* Organization info */}
                  <div className="rounded-xl border border-border bg-card p-6">
                    <h3 className="font-semibold mb-4">Organization Details</h3>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <p className="text-sm text-muted-foreground">Name</p>
                        <p className="font-medium">{selectedOrg.name}</p>
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground">Plan</p>
                        <p className="font-medium">{selectedOrg.planType}</p>
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground">Seats Used</p>
                        <p className="font-medium">{selectedOrg.seatsUsed} / {selectedOrg.seatsTotal}</p>
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground">Members</p>
                        <p className="font-medium">{selectedOrg.members?.length || 0}</p>
                      </div>
                    </div>
                  </div>

                  {/* Team Members */}
                  <div className="rounded-xl border border-border bg-card p-6">
                    <h3 className="font-semibold mb-4">Team Members</h3>
                    <div className="space-y-3">
                      {selectedOrg.members?.map((member: any) => (
                        <div key={member.id} className="flex items-center justify-between p-3 rounded-lg bg-muted/30">
                          <div className="flex items-center gap-3">
                            {member.user.image ? (
                              <Image
                                src={member.user.image}
                                alt={member.user.name || 'User'}
                                width={40}
                                height={40}
                                className="h-10 w-10 rounded-full object-cover"
                              />
                            ) : (
                              <div className="h-10 w-10 rounded-full bg-primary/20 flex items-center justify-center">
                                <span className="font-medium text-sm">
                                  {member.user.name?.[0]?.toUpperCase() || member.user.email[0].toUpperCase()}
                                </span>
                              </div>
                            )}
                            <div>
                              <p className="font-medium">{member.user.name || 'Unnamed'}</p>
                              <p className="text-sm text-muted-foreground">{member.user.email}</p>
                            </div>
                          </div>
                          <div className="flex items-center gap-2">
                            <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                              member.role === 'OWNER' ? 'bg-purple-500/10 text-purple-600' :
                              member.role === 'ADMIN' ? 'bg-blue-500/10 text-blue-600' :
                              member.role === 'MEMBER' ? 'bg-green-500/10 text-green-600' :
                              'bg-gray-500/10 text-gray-600'
                            }`}>
                              {member.role}
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Pending Invitations */}
                  {selectedOrg.invitations && selectedOrg.invitations.length > 0 && (
                    <div className="rounded-xl border border-border bg-card p-6">
                      <h3 className="font-semibold mb-4">Pending Invitations</h3>
                      <div className="space-y-3">
                        {selectedOrg.invitations.map((invitation: any) => (
                          <div key={invitation.id} className="flex items-center justify-between p-3 rounded-lg bg-muted/30">
                            <div className="flex items-center gap-3">
                              <div className="h-10 w-10 rounded-full bg-orange-500/20 flex items-center justify-center">
                                <Clock className="h-5 w-5 text-orange-600" />
                              </div>
                              <div>
                                <p className="font-medium">{invitation.email}</p>
                                <p className="text-sm text-muted-foreground">
                                  Invited by {invitation.invitedBy?.name || 'Unknown'}
                                </p>
                              </div>
                            </div>
                            <span className="px-3 py-1 rounded-full text-xs font-medium bg-orange-500/10 text-orange-600">
                              {invitation.role}
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          )}

          {activeTab === 'settings' && (
            <div>
              <div className="mb-8">
                <h1 className="text-3xl font-bold mb-2">Settings</h1>
                <p className="text-muted-foreground">Manage your account and preferences</p>
              </div>

              <div className="space-y-6">
                <div className="rounded-xl border border-border bg-card p-6">
                  <h3 className="font-semibold mb-4">Profile Information</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="text-sm text-muted-foreground">Name</label>
                      <p className="text-sm font-medium">{session.user.name || 'Not set'}</p>
                    </div>
                    <div>
                      <label className="text-sm text-muted-foreground">Email</label>
                      <p className="text-sm font-medium">{session.user.email}</p>
                    </div>
                  </div>
                </div>

                <div className="rounded-xl border border-border bg-card p-6">
                  <h3 className="font-semibold mb-4">Plan & Usage</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <label className="text-sm text-muted-foreground">Current Plan</label>
                        <p className="text-sm font-medium">{session.user.planType}</p>
                      </div>
                      <span className="px-3 py-1 rounded-full text-xs font-medium bg-primary/10 text-primary">
                        {session.user.planStatus}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </main>

      {/* Create Organization Modal */}
      {showCreateOrgModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-card rounded-xl border border-border max-w-md w-full p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold">Create Organization</h2>
              <button
                onClick={() => setShowCreateOrgModal(false)}
                className="p-1 hover:bg-muted/50 rounded-lg transition"
              >
                <X className="h-5 w-5" />
              </button>
            </div>

            <form onSubmit={handleCreateOrganization} className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">
                  Organization Name *
                </label>
                <input
                  type="text"
                  value={orgName}
                  onChange={(e) => {
                    setOrgName(e.target.value)
                    // Auto-generate slug
                    setOrgSlug(e.target.value.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, ''))
                  }}
                  className="w-full px-3 py-2 rounded-lg border border-border bg-background"
                  placeholder="Acme Inc"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">
                  Organization Slug *
                </label>
                <input
                  type="text"
                  value={orgSlug}
                  onChange={(e) => setOrgSlug(e.target.value.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, ''))}
                  className="w-full px-3 py-2 rounded-lg border border-border bg-background"
                  placeholder="acme-inc"
                  required
                />
                <p className="text-xs text-muted-foreground mt-1">
                  Used in URLs. Only lowercase letters, numbers, and hyphens.
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">
                  Domain (Optional)
                </label>
                <input
                  type="text"
                  value={orgDomain}
                  onChange={(e) => setOrgDomain(e.target.value)}
                  className="w-full px-3 py-2 rounded-lg border border-border bg-background"
                  placeholder="acme.com"
                />
                <p className="text-xs text-muted-foreground mt-1">
                  Users with this email domain can auto-join.
                </p>
              </div>

              {message && (
                <div className={`p-3 rounded-lg text-sm ${message.type === 'success' ? 'bg-green-500/10 text-green-600' : 'bg-red-500/10 text-red-600'}`}>
                  {message.text}
                </div>
              )}

              <div className="flex gap-3">
                <button
                  type="button"
                  onClick={() => setShowCreateOrgModal(false)}
                  className="flex-1 px-4 py-2 rounded-lg border border-border hover:bg-muted/50 transition"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={loading}
                  className="flex-1 px-4 py-2 rounded-lg bg-primary text-primary-foreground hover:opacity-90 transition disabled:opacity-50"
                >
                  {loading ? 'Creating...' : 'Create Organization'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Invite Member Modal */}
      {showInviteModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-card rounded-xl border border-border max-w-md w-full p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold">Invite Team Member</h2>
              <button
                onClick={() => setShowInviteModal(false)}
                className="p-1 hover:bg-muted/50 rounded-lg transition"
              >
                <X className="h-5 w-5" />
              </button>
            </div>

            <form onSubmit={handleInviteMember} className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">
                  Email Address *
                </label>
                <input
                  type="email"
                  value={inviteEmail}
                  onChange={(e) => setInviteEmail(e.target.value)}
                  className="w-full px-3 py-2 rounded-lg border border-border bg-background"
                  placeholder="colleague@example.com"
                  required
                />
                <p className="text-xs text-muted-foreground mt-1">
                  An invitation email will be sent to this address.
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">
                  Role *
                </label>
                <select
                  value={inviteRole}
                  onChange={(e) => setInviteRole(e.target.value as 'ADMIN' | 'MEMBER' | 'VIEWER')}
                  className="w-full px-3 py-2 rounded-lg border border-border bg-background"
                  required
                >
                  <option value="MEMBER">Member - Can view and edit content</option>
                  <option value="ADMIN">Admin - Can manage members and settings</option>
                  <option value="VIEWER">Viewer - Can only view content</option>
                </select>
              </div>

              {message && (
                <div className={`p-3 rounded-lg text-sm ${message.type === 'success' ? 'bg-green-500/10 text-green-600' : 'bg-red-500/10 text-red-600'}`}>
                  {message.text}
                </div>
              )}

              <div className="flex gap-3">
                <button
                  type="button"
                  onClick={() => setShowInviteModal(false)}
                  className="flex-1 px-4 py-2 rounded-lg border border-border hover:bg-muted/50 transition"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={loading}
                  className="flex-1 px-4 py-2 rounded-lg bg-primary text-primary-foreground hover:opacity-90 transition disabled:opacity-50"
                >
                  {loading ? 'Sending...' : 'Send Invitation'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Create Collection Modal */}
      {showCreateCollectionModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <div className="bg-card rounded-xl max-w-md w-full border border-border">
            <div className="flex items-center justify-between p-6 border-b border-border">
              <h2 className="text-xl font-semibold">Create New Collection</h2>
              <button
                onClick={() => setShowCreateCollectionModal(false)}
                className="text-muted-foreground hover:text-foreground"
              >
                <X className="h-5 w-5" />
              </button>
            </div>

            <form onSubmit={handleCreateCollection} className="p-6">
              <div className="space-y-4">
                <div>
                  <label htmlFor="collectionName" className="block text-sm font-medium mb-2">
                    Collection Name
                  </label>
                  <input
                    type="text"
                    id="collectionName"
                    value={collectionName}
                    onChange={(e) => setCollectionName(e.target.value)}
                    className="w-full px-3 py-2 rounded-lg border border-border bg-background focus:outline-none focus:ring-2 focus:ring-ring"
                    placeholder="My Knowledge Base"
                    required
                  />
                </div>

                <div>
                  <label htmlFor="collectionDescription" className="block text-sm font-medium mb-2">
                    Description (Optional)
                  </label>
                  <textarea
                    id="collectionDescription"
                    value={collectionDescription}
                    onChange={(e) => setCollectionDescription(e.target.value)}
                    className="w-full px-3 py-2 rounded-lg border border-border bg-background focus:outline-none focus:ring-2 focus:ring-ring"
                    placeholder="Describe what this collection is for..."
                    rows={3}
                  />
                </div>

                <div>
                  <label htmlFor="collectionVisibility" className="block text-sm font-medium mb-2">
                    Visibility
                  </label>
                  <select
                    id="collectionVisibility"
                    value={collectionVisibility}
                    onChange={(e) => setCollectionVisibility(e.target.value as 'PRIVATE' | 'ORGANIZATION' | 'PUBLIC')}
                    className="w-full px-3 py-2 rounded-lg border border-border bg-background focus:outline-none focus:ring-2 focus:ring-ring"
                  >
                    <option value="PRIVATE">Private - Only you</option>
                    <option value="ORGANIZATION">Organization - Team members</option>
                    <option value="PUBLIC">Public - Everyone</option>
                  </select>
                </div>
              </div>

              {message && (
                <div className={`mt-4 p-3 rounded-lg text-sm ${
                  message.type === 'success' ? 'bg-green-500/10 text-green-600' : 'bg-red-500/10 text-red-600'
                }`}>
                  {message.text}
                </div>
              )}

              <div className="flex gap-3 mt-6">
                <button
                  type="button"
                  onClick={() => setShowCreateCollectionModal(false)}
                  className="flex-1 px-4 py-2 rounded-lg border border-border hover:bg-muted/50 transition"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={loading}
                  className="flex-1 px-4 py-2 rounded-lg bg-primary text-primary-foreground hover:opacity-90 transition disabled:opacity-50"
                >
                  {loading ? 'Creating...' : 'Create Collection'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}
